gmail login integration with nextjs

I'll provide a step-by-step implementation for integrating Gmail login into a Next.js application:

First, install the necessary dependencies:

pnpm install next-auth @types/next-auth
Set up Google Cloud Console credentials:
Go to the Google Cloud Console
Create a new project or select an existing one
Navigate to "Credentials"
Create an OAuth 2.0 Client ID
Add authorized redirect URIs (e.g., http://localhost:3000/api/auth/callback/google and your production URL)

Create authentication configuration files:


import type { NextAuthConfig } from 'next-auth'

export const authConfig = {
  providers: [],
  pages: {
    signIn: '/login',
  },
  callbacks: {
    authorized({ auth, request: { nextUrl } }) {
      const isLoggedIn = !!auth?.user
      const isOnDashboard = nextUrl.pathname.startsWith('/dashboard')
      
      if (isOnDashboard) {
        return isLoggedIn
      } else if (isLoggedIn) {
        return Response.redirect(new URL('/dashboard', nextUrl))
      }
      
      return true
    },
  },
} satisfies NextAuthConfig

import NextAuth from 'next-auth'
import Google from 'next-auth/providers/google'
import { authConfig } from './auth.config'

export const { 
  auth, 
  signIn, 
  signOut 
} = NextAuth({
  ...authConfig,
  providers: [
    Google({
      clientId: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      authorization: {
        params: {
          prompt: 'consent',
          access_type: 'offline',
          scope: 'openid email profile'
        }
      }
    })
  ],
  callbacks: {
    async jwt({ token, account, profile }) {
      if (account) {
        token.accessToken = account.access_token
        token.id = profile?.sub
      }
      return token
    },
    async session({ session, token }) {
      session.user.id = token.id as string
      session.accessToken = token.accessToken as string
      return session
    }
  }
})
Create a login page:

'use client'

import { signIn } from 'next-auth/react'
import { Button } from '@/components/ui/button'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'

export default function LoginPage() {
  return (
    <div className="flex min-h-screen items-center justify-center bg-gray-100">
      <Card className="w-full max-w-md">
        <CardHeader>
          <CardTitle>Sign In</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <Button 
            onClick={() => signIn('google', { callbackUrl: '/dashboard' })}
            className="w-full"
          >
            Sign in with Gmail
          </Button>
        </CardContent>
      </Card>
    </div>
  )
}
Update your .env.local file:

GOOGLE_CLIENT_ID=your_google_client_id
GOOGLE_CLIENT_SECRET=your_google_client_secret
NEXTAUTH_SECRET=your_nextauth_secret
NEXTAUTH_URL=http://localhost:3000
Create a protected dashboard page:

import { auth, signOut } from '@/auth'
import { Button } from '@/components/ui/button'
import { redirect } from 'next/navigation'

export default async function DashboardPage() {
  const session = await auth()

  if (!session) {
    redirect('/login')
  }

  return (
    <div className="container mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">
        Welcome, {session.user?.name}
      </h1>
      <img 
        src={session.user?.image || '/placeholder.svg'}
        alt="Profile"
        className="w-24 h-24 rounded-full mb-4"
      />
      <p>Email: {session.user?.email}</p>
      
      <form 
        action={async () => {
          'use server'
          await signOut()
        }}
      >
        <Button type="submit" variant="destructive" className="mt-4">
          Sign Out
        </Button>
      </form>
    </div>
  )
}
Add Middleware for route protection:

tsx project="Gmail Login"